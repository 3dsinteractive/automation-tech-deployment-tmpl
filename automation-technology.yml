apiVersion: apps/v1
kind: Deployment
metadata:
  name: <name>
  namespace: <namespace>
  labels:
    name: <name>
spec:
  selector:
    matchLabels:
      name: <name>
  replicas: <replicas>
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 3
  template:
    metadata:
      labels:
        name: <name>
    spec:
      containers:
      - name: <name>
        image: <image>
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 30
          failureThreshold: 10
        env: [ {name: MY_NODE_NAME, valueFrom: { fieldRef: { fieldPath: spec.nodeName }}}, {name: MY_POD_NAME, valueFrom: { fieldRef: { fieldPath: metadata.name }}}, {name: MY_NAMESPACE, valueFrom: { fieldRef: { fieldPath: metadata.namespace }}}, {name: SERVICE_ID, value: <env>} <envs>]
        ports:
        - name: connect8080
          containerPort: 8080
        resources:
          requests:
            memory: <minMem>
            cpu: <minCpu>
          limits:
            memory: <maxMem>
            cpu: <maxCpu>
---
apiVersion: v1
kind: Service
metadata:
  name: <name>
  namespace: <namespace>
  labels:
    name: <name>
spec:
  ports:
  - port: 8080
    name: connect8080
    targetPort: 8080
    protocol: TCP
  selector:
    name: <name>